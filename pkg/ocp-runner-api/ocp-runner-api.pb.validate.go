// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/ocp-runner-api/ocp-runner-api.proto

package ocp_runner_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreateRunnerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateRunnerRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Os

	// no validation rules for Arch

	return nil
}

// CreateRunnerRequestValidationError is the validation error returned by
// CreateRunnerRequest.Validate if the designated constraints aren't met.
type CreateRunnerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRunnerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRunnerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRunnerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRunnerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRunnerRequestValidationError) ErrorName() string {
	return "CreateRunnerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRunnerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRunnerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRunnerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRunnerRequestValidationError{}

// Validate checks the field values on CreateRunnerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateRunnerResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Guid

	return nil
}

// CreateRunnerResponseValidationError is the validation error returned by
// CreateRunnerResponse.Validate if the designated constraints aren't met.
type CreateRunnerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRunnerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRunnerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRunnerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRunnerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRunnerResponseValidationError) ErrorName() string {
	return "CreateRunnerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRunnerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRunnerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRunnerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRunnerResponseValidationError{}

// Validate checks the field values on MultiCreateRunnerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateRunnerRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRunners() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiCreateRunnerRequestValidationError{
					field:  fmt.Sprintf("Runners[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for BatchSize

	return nil
}

// MultiCreateRunnerRequestValidationError is the validation error returned by
// MultiCreateRunnerRequest.Validate if the designated constraints aren't met.
type MultiCreateRunnerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateRunnerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateRunnerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateRunnerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateRunnerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateRunnerRequestValidationError) ErrorName() string {
	return "MultiCreateRunnerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateRunnerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateRunnerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateRunnerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateRunnerRequestValidationError{}

// Validate checks the field values on MultiCreateRunnerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateRunnerResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// MultiCreateRunnerResponseValidationError is the validation error returned by
// MultiCreateRunnerResponse.Validate if the designated constraints aren't met.
type MultiCreateRunnerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateRunnerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateRunnerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateRunnerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateRunnerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateRunnerResponseValidationError) ErrorName() string {
	return "MultiCreateRunnerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateRunnerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateRunnerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateRunnerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateRunnerResponseValidationError{}

// Validate checks the field values on UpdateRunnerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateRunnerRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Guid

	// no validation rules for Os

	// no validation rules for Arch

	return nil
}

// UpdateRunnerRequestValidationError is the validation error returned by
// UpdateRunnerRequest.Validate if the designated constraints aren't met.
type UpdateRunnerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRunnerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRunnerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRunnerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRunnerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRunnerRequestValidationError) ErrorName() string {
	return "UpdateRunnerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRunnerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRunnerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRunnerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRunnerRequestValidationError{}

// Validate checks the field values on UpdateRunnerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateRunnerResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateRunnerResponseValidationError is the validation error returned by
// UpdateRunnerResponse.Validate if the designated constraints aren't met.
type UpdateRunnerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRunnerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRunnerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRunnerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRunnerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRunnerResponseValidationError) ErrorName() string {
	return "UpdateRunnerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRunnerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRunnerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRunnerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRunnerResponseValidationError{}

// Validate checks the field values on RemoveRunnerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveRunnerRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Guid

	return nil
}

// RemoveRunnerRequestValidationError is the validation error returned by
// RemoveRunnerRequest.Validate if the designated constraints aren't met.
type RemoveRunnerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveRunnerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveRunnerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveRunnerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveRunnerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveRunnerRequestValidationError) ErrorName() string {
	return "RemoveRunnerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveRunnerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveRunnerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveRunnerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveRunnerRequestValidationError{}

// Validate checks the field values on RemoveRunnerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveRunnerResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveRunnerResponseValidationError is the validation error returned by
// RemoveRunnerResponse.Validate if the designated constraints aren't met.
type RemoveRunnerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveRunnerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveRunnerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveRunnerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveRunnerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveRunnerResponseValidationError) ErrorName() string {
	return "RemoveRunnerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveRunnerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveRunnerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveRunnerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveRunnerResponseValidationError{}

// Validate checks the field values on ListFiltersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListFiltersRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListFiltersRequestValidationError is the validation error returned by
// ListFiltersRequest.Validate if the designated constraints aren't met.
type ListFiltersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFiltersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFiltersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFiltersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFiltersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFiltersRequestValidationError) ErrorName() string {
	return "ListFiltersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListFiltersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFiltersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFiltersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFiltersRequestValidationError{}

// Validate checks the field values on Runner with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Runner) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Guid

	// no validation rules for Os

	// no validation rules for Arch

	return nil
}

// RunnerValidationError is the validation error returned by Runner.Validate if
// the designated constraints aren't met.
type RunnerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunnerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunnerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunnerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunnerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunnerValidationError) ErrorName() string { return "RunnerValidationError" }

// Error satisfies the builtin error interface
func (e RunnerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunner.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunnerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunnerValidationError{}

// Validate checks the field values on RunnersListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RunnersListResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRunners() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunnersListResponseValidationError{
					field:  fmt.Sprintf("Runners[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RunnersListResponseValidationError is the validation error returned by
// RunnersListResponse.Validate if the designated constraints aren't met.
type RunnersListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunnersListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunnersListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunnersListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunnersListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunnersListResponseValidationError) ErrorName() string {
	return "RunnersListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RunnersListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunnersListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunnersListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunnersListResponseValidationError{}
