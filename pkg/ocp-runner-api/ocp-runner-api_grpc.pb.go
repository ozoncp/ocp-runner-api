// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_runner_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpRunnerServiceClient is the client API for OcpRunnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpRunnerServiceClient interface {
	CreateRunner(ctx context.Context, in *CreateRunnerRequest, opts ...grpc.CallOption) (*CreateRunnerResponse, error)
	MultiCreateRunner(ctx context.Context, in *MultiCreateRunnerRequest, opts ...grpc.CallOption) (*MultiCreateRunnerResponse, error)
	UpdateRunner(ctx context.Context, in *UpdateRunnerRequest, opts ...grpc.CallOption) (*UpdateRunnerResponse, error)
	RemoveRunner(ctx context.Context, in *RemoveRunnerRequest, opts ...grpc.CallOption) (*RemoveRunnerResponse, error)
	ListRunners(ctx context.Context, in *ListFiltersRequest, opts ...grpc.CallOption) (*RunnersListResponse, error)
}

type ocpRunnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpRunnerServiceClient(cc grpc.ClientConnInterface) OcpRunnerServiceClient {
	return &ocpRunnerServiceClient{cc}
}

func (c *ocpRunnerServiceClient) CreateRunner(ctx context.Context, in *CreateRunnerRequest, opts ...grpc.CallOption) (*CreateRunnerResponse, error) {
	out := new(CreateRunnerResponse)
	err := c.cc.Invoke(ctx, "/ocp.runner.api.OcpRunnerService/CreateRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpRunnerServiceClient) MultiCreateRunner(ctx context.Context, in *MultiCreateRunnerRequest, opts ...grpc.CallOption) (*MultiCreateRunnerResponse, error) {
	out := new(MultiCreateRunnerResponse)
	err := c.cc.Invoke(ctx, "/ocp.runner.api.OcpRunnerService/MultiCreateRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpRunnerServiceClient) UpdateRunner(ctx context.Context, in *UpdateRunnerRequest, opts ...grpc.CallOption) (*UpdateRunnerResponse, error) {
	out := new(UpdateRunnerResponse)
	err := c.cc.Invoke(ctx, "/ocp.runner.api.OcpRunnerService/UpdateRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpRunnerServiceClient) RemoveRunner(ctx context.Context, in *RemoveRunnerRequest, opts ...grpc.CallOption) (*RemoveRunnerResponse, error) {
	out := new(RemoveRunnerResponse)
	err := c.cc.Invoke(ctx, "/ocp.runner.api.OcpRunnerService/RemoveRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpRunnerServiceClient) ListRunners(ctx context.Context, in *ListFiltersRequest, opts ...grpc.CallOption) (*RunnersListResponse, error) {
	out := new(RunnersListResponse)
	err := c.cc.Invoke(ctx, "/ocp.runner.api.OcpRunnerService/ListRunners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpRunnerServiceServer is the server API for OcpRunnerService service.
// All implementations must embed UnimplementedOcpRunnerServiceServer
// for forward compatibility
type OcpRunnerServiceServer interface {
	CreateRunner(context.Context, *CreateRunnerRequest) (*CreateRunnerResponse, error)
	MultiCreateRunner(context.Context, *MultiCreateRunnerRequest) (*MultiCreateRunnerResponse, error)
	UpdateRunner(context.Context, *UpdateRunnerRequest) (*UpdateRunnerResponse, error)
	RemoveRunner(context.Context, *RemoveRunnerRequest) (*RemoveRunnerResponse, error)
	ListRunners(context.Context, *ListFiltersRequest) (*RunnersListResponse, error)
	mustEmbedUnimplementedOcpRunnerServiceServer()
}

// UnimplementedOcpRunnerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOcpRunnerServiceServer struct {
}

func (UnimplementedOcpRunnerServiceServer) CreateRunner(context.Context, *CreateRunnerRequest) (*CreateRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRunner not implemented")
}
func (UnimplementedOcpRunnerServiceServer) MultiCreateRunner(context.Context, *MultiCreateRunnerRequest) (*MultiCreateRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiCreateRunner not implemented")
}
func (UnimplementedOcpRunnerServiceServer) UpdateRunner(context.Context, *UpdateRunnerRequest) (*UpdateRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRunner not implemented")
}
func (UnimplementedOcpRunnerServiceServer) RemoveRunner(context.Context, *RemoveRunnerRequest) (*RemoveRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRunner not implemented")
}
func (UnimplementedOcpRunnerServiceServer) ListRunners(context.Context, *ListFiltersRequest) (*RunnersListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRunners not implemented")
}
func (UnimplementedOcpRunnerServiceServer) mustEmbedUnimplementedOcpRunnerServiceServer() {}

// UnsafeOcpRunnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpRunnerServiceServer will
// result in compilation errors.
type UnsafeOcpRunnerServiceServer interface {
	mustEmbedUnimplementedOcpRunnerServiceServer()
}

func RegisterOcpRunnerServiceServer(s grpc.ServiceRegistrar, srv OcpRunnerServiceServer) {
	s.RegisterService(&OcpRunnerService_ServiceDesc, srv)
}

func _OcpRunnerService_CreateRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpRunnerServiceServer).CreateRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.runner.api.OcpRunnerService/CreateRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpRunnerServiceServer).CreateRunner(ctx, req.(*CreateRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpRunnerService_MultiCreateRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiCreateRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpRunnerServiceServer).MultiCreateRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.runner.api.OcpRunnerService/MultiCreateRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpRunnerServiceServer).MultiCreateRunner(ctx, req.(*MultiCreateRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpRunnerService_UpdateRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpRunnerServiceServer).UpdateRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.runner.api.OcpRunnerService/UpdateRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpRunnerServiceServer).UpdateRunner(ctx, req.(*UpdateRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpRunnerService_RemoveRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpRunnerServiceServer).RemoveRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.runner.api.OcpRunnerService/RemoveRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpRunnerServiceServer).RemoveRunner(ctx, req.(*RemoveRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpRunnerService_ListRunners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpRunnerServiceServer).ListRunners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.runner.api.OcpRunnerService/ListRunners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpRunnerServiceServer).ListRunners(ctx, req.(*ListFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpRunnerService_ServiceDesc is the grpc.ServiceDesc for OcpRunnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpRunnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.runner.api.OcpRunnerService",
	HandlerType: (*OcpRunnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRunner",
			Handler:    _OcpRunnerService_CreateRunner_Handler,
		},
		{
			MethodName: "MultiCreateRunner",
			Handler:    _OcpRunnerService_MultiCreateRunner_Handler,
		},
		{
			MethodName: "UpdateRunner",
			Handler:    _OcpRunnerService_UpdateRunner_Handler,
		},
		{
			MethodName: "RemoveRunner",
			Handler:    _OcpRunnerService_RemoveRunner_Handler,
		},
		{
			MethodName: "ListRunners",
			Handler:    _OcpRunnerService_ListRunners_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ocp-runner-api/ocp-runner-api.proto",
}
