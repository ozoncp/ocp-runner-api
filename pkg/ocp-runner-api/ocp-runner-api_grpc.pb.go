// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_runner_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpRunnerApiClient is the client API for OcpRunnerApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpRunnerApiClient interface {
	CreateRunner(ctx context.Context, in *Runner, opts ...grpc.CallOption) (*OperationResult, error)
	DescribeRunner(ctx context.Context, in *Runner, opts ...grpc.CallOption) (*OperationResult, error)
	RemoveRunner(ctx context.Context, in *Runner, opts ...grpc.CallOption) (*OperationResult, error)
	ListRunners(ctx context.Context, in *ListFilters, opts ...grpc.CallOption) (*RunnersList, error)
}

type ocpRunnerApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpRunnerApiClient(cc grpc.ClientConnInterface) OcpRunnerApiClient {
	return &ocpRunnerApiClient{cc}
}

func (c *ocpRunnerApiClient) CreateRunner(ctx context.Context, in *Runner, opts ...grpc.CallOption) (*OperationResult, error) {
	out := new(OperationResult)
	err := c.cc.Invoke(ctx, "/ocp.task.api.OcpRunnerApi/CreateRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpRunnerApiClient) DescribeRunner(ctx context.Context, in *Runner, opts ...grpc.CallOption) (*OperationResult, error) {
	out := new(OperationResult)
	err := c.cc.Invoke(ctx, "/ocp.task.api.OcpRunnerApi/DescribeRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpRunnerApiClient) RemoveRunner(ctx context.Context, in *Runner, opts ...grpc.CallOption) (*OperationResult, error) {
	out := new(OperationResult)
	err := c.cc.Invoke(ctx, "/ocp.task.api.OcpRunnerApi/RemoveRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpRunnerApiClient) ListRunners(ctx context.Context, in *ListFilters, opts ...grpc.CallOption) (*RunnersList, error) {
	out := new(RunnersList)
	err := c.cc.Invoke(ctx, "/ocp.task.api.OcpRunnerApi/ListRunners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpRunnerApiServer is the server API for OcpRunnerApi service.
// All implementations must embed UnimplementedOcpRunnerApiServer
// for forward compatibility
type OcpRunnerApiServer interface {
	CreateRunner(context.Context, *Runner) (*OperationResult, error)
	DescribeRunner(context.Context, *Runner) (*OperationResult, error)
	RemoveRunner(context.Context, *Runner) (*OperationResult, error)
	ListRunners(context.Context, *ListFilters) (*RunnersList, error)
	mustEmbedUnimplementedOcpRunnerApiServer()
}

// UnimplementedOcpRunnerApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpRunnerApiServer struct {
}

func (UnimplementedOcpRunnerApiServer) CreateRunner(context.Context, *Runner) (*OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRunner not implemented")
}
func (UnimplementedOcpRunnerApiServer) DescribeRunner(context.Context, *Runner) (*OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeRunner not implemented")
}
func (UnimplementedOcpRunnerApiServer) RemoveRunner(context.Context, *Runner) (*OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRunner not implemented")
}
func (UnimplementedOcpRunnerApiServer) ListRunners(context.Context, *ListFilters) (*RunnersList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRunners not implemented")
}
func (UnimplementedOcpRunnerApiServer) mustEmbedUnimplementedOcpRunnerApiServer() {}

// UnsafeOcpRunnerApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpRunnerApiServer will
// result in compilation errors.
type UnsafeOcpRunnerApiServer interface {
	mustEmbedUnimplementedOcpRunnerApiServer()
}

func RegisterOcpRunnerApiServer(s grpc.ServiceRegistrar, srv OcpRunnerApiServer) {
	s.RegisterService(&OcpRunnerApi_ServiceDesc, srv)
}

func _OcpRunnerApi_CreateRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Runner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpRunnerApiServer).CreateRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.task.api.OcpRunnerApi/CreateRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpRunnerApiServer).CreateRunner(ctx, req.(*Runner))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpRunnerApi_DescribeRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Runner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpRunnerApiServer).DescribeRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.task.api.OcpRunnerApi/DescribeRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpRunnerApiServer).DescribeRunner(ctx, req.(*Runner))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpRunnerApi_RemoveRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Runner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpRunnerApiServer).RemoveRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.task.api.OcpRunnerApi/RemoveRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpRunnerApiServer).RemoveRunner(ctx, req.(*Runner))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpRunnerApi_ListRunners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpRunnerApiServer).ListRunners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.task.api.OcpRunnerApi/ListRunners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpRunnerApiServer).ListRunners(ctx, req.(*ListFilters))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpRunnerApi_ServiceDesc is the grpc.ServiceDesc for OcpRunnerApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpRunnerApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.task.api.OcpRunnerApi",
	HandlerType: (*OcpRunnerApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRunner",
			Handler:    _OcpRunnerApi_CreateRunner_Handler,
		},
		{
			MethodName: "DescribeRunner",
			Handler:    _OcpRunnerApi_DescribeRunner_Handler,
		},
		{
			MethodName: "RemoveRunner",
			Handler:    _OcpRunnerApi_RemoveRunner_Handler,
		},
		{
			MethodName: "ListRunners",
			Handler:    _OcpRunnerApi_ListRunners_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ocp-runner-api/ocp-runner-api.proto",
}
